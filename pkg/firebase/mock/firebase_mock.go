// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hankimmy/PtmrBackend/pkg/firebase (interfaces: AuthClientFirebase)

// Package mockfb is a generated GoMock package.
package mockfb

import (
	context "context"
	reflect "reflect"

	auth "firebase.google.com/go/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthClientFirebase is a mock of AuthClientFirebase interface.
type MockAuthClientFirebase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientFirebaseMockRecorder
}

// MockAuthClientFirebaseMockRecorder is the mock recorder for MockAuthClientFirebase.
type MockAuthClientFirebaseMockRecorder struct {
	mock *MockAuthClientFirebase
}

// NewMockAuthClientFirebase creates a new mock instance.
func NewMockAuthClientFirebase(ctrl *gomock.Controller) *MockAuthClientFirebase {
	mock := &MockAuthClientFirebase{ctrl: ctrl}
	mock.recorder = &MockAuthClientFirebaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClientFirebase) EXPECT() *MockAuthClientFirebaseMockRecorder {
	return m.recorder
}

// GenerateEmailVerificationLink mocks base method.
func (m *MockAuthClientFirebase) GenerateEmailVerificationLink(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailVerificationLink", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmailVerificationLink indicates an expected call of GenerateEmailVerificationLink.
func (mr *MockAuthClientFirebaseMockRecorder) GenerateEmailVerificationLink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailVerificationLink", reflect.TypeOf((*MockAuthClientFirebase)(nil).GenerateEmailVerificationLink), arg0, arg1, arg2)
}

// GetUserByEmail mocks base method.
func (m *MockAuthClientFirebase) GetUserByEmail(arg0 context.Context, arg1 string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthClientFirebaseMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthClientFirebase)(nil).GetUserByEmail), arg0, arg1)
}

// IsEmailVerified mocks base method.
func (m *MockAuthClientFirebase) IsEmailVerified(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailVerified", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailVerified indicates an expected call of IsEmailVerified.
func (mr *MockAuthClientFirebaseMockRecorder) IsEmailVerified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailVerified", reflect.TypeOf((*MockAuthClientFirebase)(nil).IsEmailVerified), arg0, arg1)
}

// SetUserRole mocks base method.
func (m *MockAuthClientFirebase) SetUserRole(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserRole indicates an expected call of SetUserRole.
func (mr *MockAuthClientFirebaseMockRecorder) SetUserRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserRole", reflect.TypeOf((*MockAuthClientFirebase)(nil).SetUserRole), arg0, arg1, arg2)
}

// VerifyIDToken mocks base method.
func (m *MockAuthClientFirebase) VerifyIDToken(arg0 context.Context, arg1 string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", arg0, arg1)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockAuthClientFirebaseMockRecorder) VerifyIDToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockAuthClientFirebase)(nil).VerifyIDToken), arg0, arg1)
}
