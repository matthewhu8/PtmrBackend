// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hankimmy/PtmrBackend/pkg/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/hankimmy/PtmrBackend/pkg/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddJobListing mocks base method.
func (m *MockStore) AddJobListing(arg0 context.Context, arg1 db.AddJobListingParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobListing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJobListing indicates an expected call of AddJobListing.
func (mr *MockStoreMockRecorder) AddJobListing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobListing", reflect.TypeOf((*MockStore)(nil).AddJobListing), arg0, arg1)
}

// CreateCandidate mocks base method.
func (m *MockStore) CreateCandidate(arg0 context.Context, arg1 db.CreateCandidateParams) (db.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandidate", arg0, arg1)
	ret0, _ := ret[0].(db.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandidate indicates an expected call of CreateCandidate.
func (mr *MockStoreMockRecorder) CreateCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandidate", reflect.TypeOf((*MockStore)(nil).CreateCandidate), arg0, arg1)
}

// CreateCandidateApplication mocks base method.
func (m *MockStore) CreateCandidateApplication(arg0 context.Context, arg1 db.CreateCandidateApplicationParams) (db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandidateApplication", arg0, arg1)
	ret0, _ := ret[0].(db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandidateApplication indicates an expected call of CreateCandidateApplication.
func (mr *MockStoreMockRecorder) CreateCandidateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandidateApplication", reflect.TypeOf((*MockStore)(nil).CreateCandidateApplication), arg0, arg1)
}

// CreateCandidateApplicationTx mocks base method.
func (m *MockStore) CreateCandidateApplicationTx(arg0 context.Context, arg1 db.CreateCandidateApplicationTxParams) (db.CandidateAppTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandidateApplicationTx", arg0, arg1)
	ret0, _ := ret[0].(db.CandidateAppTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandidateApplicationTx indicates an expected call of CreateCandidateApplicationTx.
func (mr *MockStoreMockRecorder) CreateCandidateApplicationTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandidateApplicationTx", reflect.TypeOf((*MockStore)(nil).CreateCandidateApplicationTx), arg0, arg1)
}

// CreateCandidateSwipe mocks base method.
func (m *MockStore) CreateCandidateSwipe(arg0 context.Context, arg1 db.CreateCandidateSwipeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandidateSwipe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCandidateSwipe indicates an expected call of CreateCandidateSwipe.
func (mr *MockStoreMockRecorder) CreateCandidateSwipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandidateSwipe", reflect.TypeOf((*MockStore)(nil).CreateCandidateSwipe), arg0, arg1)
}

// CreateCandidateTx mocks base method.
func (m *MockStore) CreateCandidateTx(arg0 context.Context, arg1 db.CreateCandidateTxParams) (db.CandidateTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandidateTx", arg0, arg1)
	ret0, _ := ret[0].(db.CandidateTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandidateTx indicates an expected call of CreateCandidateTx.
func (mr *MockStoreMockRecorder) CreateCandidateTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandidateTx", reflect.TypeOf((*MockStore)(nil).CreateCandidateTx), arg0, arg1)
}

// CreateEmployer mocks base method.
func (m *MockStore) CreateEmployer(arg0 context.Context, arg1 db.CreateEmployerParams) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployer", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployer indicates an expected call of CreateEmployer.
func (mr *MockStoreMockRecorder) CreateEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployer", reflect.TypeOf((*MockStore)(nil).CreateEmployer), arg0, arg1)
}

// CreateEmployerApplication mocks base method.
func (m *MockStore) CreateEmployerApplication(arg0 context.Context, arg1 db.CreateEmployerApplicationParams) (db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployerApplication", arg0, arg1)
	ret0, _ := ret[0].(db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployerApplication indicates an expected call of CreateEmployerApplication.
func (mr *MockStoreMockRecorder) CreateEmployerApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerApplication", reflect.TypeOf((*MockStore)(nil).CreateEmployerApplication), arg0, arg1)
}

// CreateEmployerSwipes mocks base method.
func (m *MockStore) CreateEmployerSwipes(arg0 context.Context, arg1 db.CreateEmployerSwipesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployerSwipes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployerSwipes indicates an expected call of CreateEmployerSwipes.
func (mr *MockStoreMockRecorder) CreateEmployerSwipes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerSwipes", reflect.TypeOf((*MockStore)(nil).CreateEmployerSwipes), arg0, arg1)
}

// CreatePastExperience mocks base method.
func (m *MockStore) CreatePastExperience(arg0 context.Context, arg1 db.CreatePastExperienceParams) (db.PastExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastExperience", arg0, arg1)
	ret0, _ := ret[0].(db.PastExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePastExperience indicates an expected call of CreatePastExperience.
func (mr *MockStoreMockRecorder) CreatePastExperience(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastExperience", reflect.TypeOf((*MockStore)(nil).CreatePastExperience), arg0, arg1)
}

// CreatePastExperienceTx mocks base method.
func (m *MockStore) CreatePastExperienceTx(arg0 context.Context, arg1 db.CreatePastExperienceTxParams) (db.PastExperienceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePastExperienceTx", arg0, arg1)
	ret0, _ := ret[0].(db.PastExperienceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePastExperienceTx indicates an expected call of CreatePastExperienceTx.
func (mr *MockStoreMockRecorder) CreatePastExperienceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePastExperienceTx", reflect.TypeOf((*MockStore)(nil).CreatePastExperienceTx), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteApplicationTx mocks base method.
func (m *MockStore) DeleteApplicationTx(arg0 context.Context, arg1 db.DeleteApplicationTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationTx indicates an expected call of DeleteApplicationTx.
func (mr *MockStoreMockRecorder) DeleteApplicationTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationTx", reflect.TypeOf((*MockStore)(nil).DeleteApplicationTx), arg0, arg1)
}

// DeleteCandidate mocks base method.
func (m *MockStore) DeleteCandidate(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandidate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCandidate indicates an expected call of DeleteCandidate.
func (mr *MockStoreMockRecorder) DeleteCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandidate", reflect.TypeOf((*MockStore)(nil).DeleteCandidate), arg0, arg1)
}

// DeleteCandidateApplication mocks base method.
func (m *MockStore) DeleteCandidateApplication(arg0 context.Context, arg1 db.DeleteCandidateApplicationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandidateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCandidateApplication indicates an expected call of DeleteCandidateApplication.
func (mr *MockStoreMockRecorder) DeleteCandidateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandidateApplication", reflect.TypeOf((*MockStore)(nil).DeleteCandidateApplication), arg0, arg1)
}

// DeleteCandidateSwipe mocks base method.
func (m *MockStore) DeleteCandidateSwipe(arg0 context.Context, arg1 db.DeleteCandidateSwipeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandidateSwipe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCandidateSwipe indicates an expected call of DeleteCandidateSwipe.
func (mr *MockStoreMockRecorder) DeleteCandidateSwipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandidateSwipe", reflect.TypeOf((*MockStore)(nil).DeleteCandidateSwipe), arg0, arg1)
}

// DeleteEmployer mocks base method.
func (m *MockStore) DeleteEmployer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployer indicates an expected call of DeleteEmployer.
func (mr *MockStoreMockRecorder) DeleteEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployer", reflect.TypeOf((*MockStore)(nil).DeleteEmployer), arg0, arg1)
}

// DeleteEmployerApplication mocks base method.
func (m *MockStore) DeleteEmployerApplication(arg0 context.Context, arg1 db.DeleteEmployerApplicationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployerApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployerApplication indicates an expected call of DeleteEmployerApplication.
func (mr *MockStoreMockRecorder) DeleteEmployerApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployerApplication", reflect.TypeOf((*MockStore)(nil).DeleteEmployerApplication), arg0, arg1)
}

// DeleteEmployerSwipe mocks base method.
func (m *MockStore) DeleteEmployerSwipe(arg0 context.Context, arg1 db.DeleteEmployerSwipeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployerSwipe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployerSwipe indicates an expected call of DeleteEmployerSwipe.
func (mr *MockStoreMockRecorder) DeleteEmployerSwipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployerSwipe", reflect.TypeOf((*MockStore)(nil).DeleteEmployerSwipe), arg0, arg1)
}

// DeletePastExperience mocks base method.
func (m *MockStore) DeletePastExperience(arg0 context.Context, arg1 db.DeletePastExperienceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastExperience", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastExperience indicates an expected call of DeletePastExperience.
func (mr *MockStoreMockRecorder) DeletePastExperience(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastExperience", reflect.TypeOf((*MockStore)(nil).DeletePastExperience), arg0, arg1)
}

// DeletePastExperienceTx mocks base method.
func (m *MockStore) DeletePastExperienceTx(arg0 context.Context, arg1 db.DeletePastExperienceTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastExperienceTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastExperienceTx indicates an expected call of DeletePastExperienceTx.
func (mr *MockStoreMockRecorder) DeletePastExperienceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastExperienceTx", reflect.TypeOf((*MockStore)(nil).DeletePastExperienceTx), arg0, arg1)
}

// GetCandidate mocks base method.
func (m *MockStore) GetCandidate(arg0 context.Context, arg1 int64) (db.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidate", arg0, arg1)
	ret0, _ := ret[0].(db.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidate indicates an expected call of GetCandidate.
func (mr *MockStoreMockRecorder) GetCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidate", reflect.TypeOf((*MockStore)(nil).GetCandidate), arg0, arg1)
}

// GetCandidateApplicationsByEmployer mocks base method.
func (m *MockStore) GetCandidateApplicationsByEmployer(arg0 context.Context, arg1 int64) ([]db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateApplicationsByEmployer", arg0, arg1)
	ret0, _ := ret[0].([]db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateApplicationsByEmployer indicates an expected call of GetCandidateApplicationsByEmployer.
func (mr *MockStoreMockRecorder) GetCandidateApplicationsByEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateApplicationsByEmployer", reflect.TypeOf((*MockStore)(nil).GetCandidateApplicationsByEmployer), arg0, arg1)
}

// GetCandidateApplicationsByStatusAccepted mocks base method.
func (m *MockStore) GetCandidateApplicationsByStatusAccepted(arg0 context.Context, arg1 int64) ([]db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateApplicationsByStatusAccepted", arg0, arg1)
	ret0, _ := ret[0].([]db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateApplicationsByStatusAccepted indicates an expected call of GetCandidateApplicationsByStatusAccepted.
func (mr *MockStoreMockRecorder) GetCandidateApplicationsByStatusAccepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateApplicationsByStatusAccepted", reflect.TypeOf((*MockStore)(nil).GetCandidateApplicationsByStatusAccepted), arg0, arg1)
}

// GetCandidateApplicationsByStatusPending mocks base method.
func (m *MockStore) GetCandidateApplicationsByStatusPending(arg0 context.Context, arg1 int64) ([]db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateApplicationsByStatusPending", arg0, arg1)
	ret0, _ := ret[0].([]db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateApplicationsByStatusPending indicates an expected call of GetCandidateApplicationsByStatusPending.
func (mr *MockStoreMockRecorder) GetCandidateApplicationsByStatusPending(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateApplicationsByStatusPending", reflect.TypeOf((*MockStore)(nil).GetCandidateApplicationsByStatusPending), arg0, arg1)
}

// GetCandidateApplicationsByStatusRejected mocks base method.
func (m *MockStore) GetCandidateApplicationsByStatusRejected(arg0 context.Context, arg1 int64) ([]db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateApplicationsByStatusRejected", arg0, arg1)
	ret0, _ := ret[0].([]db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateApplicationsByStatusRejected indicates an expected call of GetCandidateApplicationsByStatusRejected.
func (mr *MockStoreMockRecorder) GetCandidateApplicationsByStatusRejected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateApplicationsByStatusRejected", reflect.TypeOf((*MockStore)(nil).GetCandidateApplicationsByStatusRejected), arg0, arg1)
}

// GetCandidateApplicationsByStatusSubmitted mocks base method.
func (m *MockStore) GetCandidateApplicationsByStatusSubmitted(arg0 context.Context, arg1 int64) ([]db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateApplicationsByStatusSubmitted", arg0, arg1)
	ret0, _ := ret[0].([]db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateApplicationsByStatusSubmitted indicates an expected call of GetCandidateApplicationsByStatusSubmitted.
func (mr *MockStoreMockRecorder) GetCandidateApplicationsByStatusSubmitted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateApplicationsByStatusSubmitted", reflect.TypeOf((*MockStore)(nil).GetCandidateApplicationsByStatusSubmitted), arg0, arg1)
}

// GetCandidateIDsByEmployer mocks base method.
func (m *MockStore) GetCandidateIDsByEmployer(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateIDsByEmployer", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateIDsByEmployer indicates an expected call of GetCandidateIDsByEmployer.
func (mr *MockStoreMockRecorder) GetCandidateIDsByEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateIDsByEmployer", reflect.TypeOf((*MockStore)(nil).GetCandidateIDsByEmployer), arg0, arg1)
}

// GetCandidateIdByUsername mocks base method.
func (m *MockStore) GetCandidateIdByUsername(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateIdByUsername", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateIdByUsername indicates an expected call of GetCandidateIdByUsername.
func (mr *MockStoreMockRecorder) GetCandidateIdByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateIdByUsername", reflect.TypeOf((*MockStore)(nil).GetCandidateIdByUsername), arg0, arg1)
}

// GetCandidateSwipe mocks base method.
func (m *MockStore) GetCandidateSwipe(arg0 context.Context, arg1 db.GetCandidateSwipeParams) ([]db.CandidateSwipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateSwipe", arg0, arg1)
	ret0, _ := ret[0].([]db.CandidateSwipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateSwipe indicates an expected call of GetCandidateSwipe.
func (mr *MockStoreMockRecorder) GetCandidateSwipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateSwipe", reflect.TypeOf((*MockStore)(nil).GetCandidateSwipe), arg0, arg1)
}

// GetEmployer mocks base method.
func (m *MockStore) GetEmployer(arg0 context.Context, arg1 int64) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployer", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployer indicates an expected call of GetEmployer.
func (mr *MockStoreMockRecorder) GetEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployer", reflect.TypeOf((*MockStore)(nil).GetEmployer), arg0, arg1)
}

// GetEmployerApplicationsByCandidate mocks base method.
func (m *MockStore) GetEmployerApplicationsByCandidate(arg0 context.Context, arg1 int64) ([]db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerApplicationsByCandidate", arg0, arg1)
	ret0, _ := ret[0].([]db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerApplicationsByCandidate indicates an expected call of GetEmployerApplicationsByCandidate.
func (mr *MockStoreMockRecorder) GetEmployerApplicationsByCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerApplicationsByCandidate", reflect.TypeOf((*MockStore)(nil).GetEmployerApplicationsByCandidate), arg0, arg1)
}

// GetEmployerApplicationsByStatusAccepted mocks base method.
func (m *MockStore) GetEmployerApplicationsByStatusAccepted(arg0 context.Context, arg1 int64) ([]db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerApplicationsByStatusAccepted", arg0, arg1)
	ret0, _ := ret[0].([]db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerApplicationsByStatusAccepted indicates an expected call of GetEmployerApplicationsByStatusAccepted.
func (mr *MockStoreMockRecorder) GetEmployerApplicationsByStatusAccepted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerApplicationsByStatusAccepted", reflect.TypeOf((*MockStore)(nil).GetEmployerApplicationsByStatusAccepted), arg0, arg1)
}

// GetEmployerApplicationsByStatusPending mocks base method.
func (m *MockStore) GetEmployerApplicationsByStatusPending(arg0 context.Context, arg1 int64) ([]db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerApplicationsByStatusPending", arg0, arg1)
	ret0, _ := ret[0].([]db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerApplicationsByStatusPending indicates an expected call of GetEmployerApplicationsByStatusPending.
func (mr *MockStoreMockRecorder) GetEmployerApplicationsByStatusPending(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerApplicationsByStatusPending", reflect.TypeOf((*MockStore)(nil).GetEmployerApplicationsByStatusPending), arg0, arg1)
}

// GetEmployerApplicationsByStatusRejected mocks base method.
func (m *MockStore) GetEmployerApplicationsByStatusRejected(arg0 context.Context, arg1 int64) ([]db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerApplicationsByStatusRejected", arg0, arg1)
	ret0, _ := ret[0].([]db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerApplicationsByStatusRejected indicates an expected call of GetEmployerApplicationsByStatusRejected.
func (mr *MockStoreMockRecorder) GetEmployerApplicationsByStatusRejected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerApplicationsByStatusRejected", reflect.TypeOf((*MockStore)(nil).GetEmployerApplicationsByStatusRejected), arg0, arg1)
}

// GetEmployerApplicationsByStatusSubmitted mocks base method.
func (m *MockStore) GetEmployerApplicationsByStatusSubmitted(arg0 context.Context, arg1 int64) ([]db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerApplicationsByStatusSubmitted", arg0, arg1)
	ret0, _ := ret[0].([]db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerApplicationsByStatusSubmitted indicates an expected call of GetEmployerApplicationsByStatusSubmitted.
func (mr *MockStoreMockRecorder) GetEmployerApplicationsByStatusSubmitted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerApplicationsByStatusSubmitted", reflect.TypeOf((*MockStore)(nil).GetEmployerApplicationsByStatusSubmitted), arg0, arg1)
}

// GetEmployerIdByUsername mocks base method.
func (m *MockStore) GetEmployerIdByUsername(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerIdByUsername", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerIdByUsername indicates an expected call of GetEmployerIdByUsername.
func (mr *MockStoreMockRecorder) GetEmployerIdByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerIdByUsername", reflect.TypeOf((*MockStore)(nil).GetEmployerIdByUsername), arg0, arg1)
}

// GetEmployerSwipe mocks base method.
func (m *MockStore) GetEmployerSwipe(arg0 context.Context, arg1 db.GetEmployerSwipeParams) (db.EmployerSwipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerSwipe", arg0, arg1)
	ret0, _ := ret[0].(db.EmployerSwipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerSwipe indicates an expected call of GetEmployerSwipe.
func (mr *MockStoreMockRecorder) GetEmployerSwipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerSwipe", reflect.TypeOf((*MockStore)(nil).GetEmployerSwipe), arg0, arg1)
}

// GetJobIDsByCandidate mocks base method.
func (m *MockStore) GetJobIDsByCandidate(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobIDsByCandidate", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobIDsByCandidate indicates an expected call of GetJobIDsByCandidate.
func (mr *MockStoreMockRecorder) GetJobIDsByCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobIDsByCandidate", reflect.TypeOf((*MockStore)(nil).GetJobIDsByCandidate), arg0, arg1)
}

// GetPastExperience mocks base method.
func (m *MockStore) GetPastExperience(arg0 context.Context, arg1 int64) (db.PastExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastExperience", arg0, arg1)
	ret0, _ := ret[0].(db.PastExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastExperience indicates an expected call of GetPastExperience.
func (mr *MockStoreMockRecorder) GetPastExperience(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastExperience", reflect.TypeOf((*MockStore)(nil).GetPastExperience), arg0, arg1)
}

// GetRejectedCandidateIdsByEmployer mocks base method.
func (m *MockStore) GetRejectedCandidateIdsByEmployer(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRejectedCandidateIdsByEmployer", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRejectedCandidateIdsByEmployer indicates an expected call of GetRejectedCandidateIdsByEmployer.
func (mr *MockStoreMockRecorder) GetRejectedCandidateIdsByEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRejectedCandidateIdsByEmployer", reflect.TypeOf((*MockStore)(nil).GetRejectedCandidateIdsByEmployer), arg0, arg1)
}

// GetRejectedJobIdsByCandidate mocks base method.
func (m *MockStore) GetRejectedJobIdsByCandidate(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRejectedJobIdsByCandidate", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRejectedJobIdsByCandidate indicates an expected call of GetRejectedJobIdsByCandidate.
func (mr *MockStoreMockRecorder) GetRejectedJobIdsByCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRejectedJobIdsByCandidate", reflect.TypeOf((*MockStore)(nil).GetRejectedJobIdsByCandidate), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListCandidates mocks base method.
func (m *MockStore) ListCandidates(arg0 context.Context, arg1 db.ListCandidatesParams) ([]db.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCandidates", arg0, arg1)
	ret0, _ := ret[0].([]db.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCandidates indicates an expected call of ListCandidates.
func (mr *MockStoreMockRecorder) ListCandidates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCandidates", reflect.TypeOf((*MockStore)(nil).ListCandidates), arg0, arg1)
}

// ListEmployers mocks base method.
func (m *MockStore) ListEmployers(arg0 context.Context, arg1 db.ListEmployersParams) ([]db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployers", arg0, arg1)
	ret0, _ := ret[0].([]db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployers indicates an expected call of ListEmployers.
func (mr *MockStoreMockRecorder) ListEmployers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployers", reflect.TypeOf((*MockStore)(nil).ListEmployers), arg0, arg1)
}

// ListPastExperiences mocks base method.
func (m *MockStore) ListPastExperiences(arg0 context.Context, arg1 db.ListPastExperiencesParams) ([]db.PastExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPastExperiences", arg0, arg1)
	ret0, _ := ret[0].([]db.PastExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPastExperiences indicates an expected call of ListPastExperiences.
func (mr *MockStoreMockRecorder) ListPastExperiences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPastExperiences", reflect.TypeOf((*MockStore)(nil).ListPastExperiences), arg0, arg1)
}

// UpdateCandidate mocks base method.
func (m *MockStore) UpdateCandidate(arg0 context.Context, arg1 db.UpdateCandidateParams) (db.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidate", arg0, arg1)
	ret0, _ := ret[0].(db.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCandidate indicates an expected call of UpdateCandidate.
func (mr *MockStoreMockRecorder) UpdateCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidate", reflect.TypeOf((*MockStore)(nil).UpdateCandidate), arg0, arg1)
}

// UpdateCandidateApplication mocks base method.
func (m *MockStore) UpdateCandidateApplication(arg0 context.Context, arg1 db.UpdateCandidateApplicationParams) (db.CandidateApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidateApplication", arg0, arg1)
	ret0, _ := ret[0].(db.CandidateApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCandidateApplication indicates an expected call of UpdateCandidateApplication.
func (mr *MockStoreMockRecorder) UpdateCandidateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidateApplication", reflect.TypeOf((*MockStore)(nil).UpdateCandidateApplication), arg0, arg1)
}

// UpdateCandidateApplicationStatus mocks base method.
func (m *MockStore) UpdateCandidateApplicationStatus(arg0 context.Context, arg1 db.UpdateCandidateApplicationStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidateApplicationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCandidateApplicationStatus indicates an expected call of UpdateCandidateApplicationStatus.
func (mr *MockStoreMockRecorder) UpdateCandidateApplicationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidateApplicationStatus", reflect.TypeOf((*MockStore)(nil).UpdateCandidateApplicationStatus), arg0, arg1)
}

// UpdateCandidateApplicationStatusTx mocks base method.
func (m *MockStore) UpdateCandidateApplicationStatusTx(arg0 context.Context, arg1 db.UpdateCandidateApplicationStatusTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidateApplicationStatusTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCandidateApplicationStatusTx indicates an expected call of UpdateCandidateApplicationStatusTx.
func (mr *MockStoreMockRecorder) UpdateCandidateApplicationStatusTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidateApplicationStatusTx", reflect.TypeOf((*MockStore)(nil).UpdateCandidateApplicationStatusTx), arg0, arg1)
}

// UpdateCandidateTx mocks base method.
func (m *MockStore) UpdateCandidateTx(arg0 context.Context, arg1 db.UpdateCandidateTxParams) (db.CandidateTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidateTx", arg0, arg1)
	ret0, _ := ret[0].(db.CandidateTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCandidateTx indicates an expected call of UpdateCandidateTx.
func (mr *MockStoreMockRecorder) UpdateCandidateTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidateTx", reflect.TypeOf((*MockStore)(nil).UpdateCandidateTx), arg0, arg1)
}

// UpdateEmployer mocks base method.
func (m *MockStore) UpdateEmployer(arg0 context.Context, arg1 db.UpdateEmployerParams) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployer", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployer indicates an expected call of UpdateEmployer.
func (mr *MockStoreMockRecorder) UpdateEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployer", reflect.TypeOf((*MockStore)(nil).UpdateEmployer), arg0, arg1)
}

// UpdateEmployerApplication mocks base method.
func (m *MockStore) UpdateEmployerApplication(arg0 context.Context, arg1 db.UpdateEmployerApplicationParams) (db.EmployerApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployerApplication", arg0, arg1)
	ret0, _ := ret[0].(db.EmployerApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployerApplication indicates an expected call of UpdateEmployerApplication.
func (mr *MockStoreMockRecorder) UpdateEmployerApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployerApplication", reflect.TypeOf((*MockStore)(nil).UpdateEmployerApplication), arg0, arg1)
}

// UpdateEmployerApplicationStatus mocks base method.
func (m *MockStore) UpdateEmployerApplicationStatus(arg0 context.Context, arg1 db.UpdateEmployerApplicationStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployerApplicationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployerApplicationStatus indicates an expected call of UpdateEmployerApplicationStatus.
func (mr *MockStoreMockRecorder) UpdateEmployerApplicationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployerApplicationStatus", reflect.TypeOf((*MockStore)(nil).UpdateEmployerApplicationStatus), arg0, arg1)
}

// UpdateEmployerApplicationStatusTx mocks base method.
func (m *MockStore) UpdateEmployerApplicationStatusTx(arg0 context.Context, arg1 db.UpdateEmployerApplicationStatusTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployerApplicationStatusTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployerApplicationStatusTx indicates an expected call of UpdateEmployerApplicationStatusTx.
func (mr *MockStoreMockRecorder) UpdateEmployerApplicationStatusTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployerApplicationStatusTx", reflect.TypeOf((*MockStore)(nil).UpdateEmployerApplicationStatusTx), arg0, arg1)
}

// UpdatePastExperience mocks base method.
func (m *MockStore) UpdatePastExperience(arg0 context.Context, arg1 db.UpdatePastExperienceParams) (db.PastExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePastExperience", arg0, arg1)
	ret0, _ := ret[0].(db.PastExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePastExperience indicates an expected call of UpdatePastExperience.
func (mr *MockStoreMockRecorder) UpdatePastExperience(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePastExperience", reflect.TypeOf((*MockStore)(nil).UpdatePastExperience), arg0, arg1)
}

// UpdatePastExperienceTx mocks base method.
func (m *MockStore) UpdatePastExperienceTx(arg0 context.Context, arg1 db.UpdatePastExperienceTxParams) (db.PastExperienceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePastExperienceTx", arg0, arg1)
	ret0, _ := ret[0].(db.PastExperienceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePastExperienceTx indicates an expected call of UpdatePastExperienceTx.
func (mr *MockStoreMockRecorder) UpdatePastExperienceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePastExperienceTx", reflect.TypeOf((*MockStore)(nil).UpdatePastExperienceTx), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}
