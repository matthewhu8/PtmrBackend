// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: past_experience.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPastExperience = `-- name: CreatePastExperience :one
INSERT INTO past_experiences (
    candidate_id,
    industry,
    employer,
    job_title,
    start_date,
    end_date,
    present,
    description
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         ) RETURNING id, candidate_id, industry, employer, job_title, start_date, end_date, present, description, created_at
`

type CreatePastExperienceParams struct {
	CandidateID int64       `json:"candidate_id"`
	Industry    string      `json:"industry"`
	Employer    string      `json:"employer"`
	JobTitle    string      `json:"job_title"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Present     bool        `json:"present"`
	Description string      `json:"description"`
}

func (q *Queries) CreatePastExperience(ctx context.Context, arg CreatePastExperienceParams) (PastExperience, error) {
	row := q.db.QueryRow(ctx, createPastExperience,
		arg.CandidateID,
		arg.Industry,
		arg.Employer,
		arg.JobTitle,
		arg.StartDate,
		arg.EndDate,
		arg.Present,
		arg.Description,
	)
	var i PastExperience
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.Industry,
		&i.Employer,
		&i.JobTitle,
		&i.StartDate,
		&i.EndDate,
		&i.Present,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deletePastExperience = `-- name: DeletePastExperience :exec
DELETE FROM past_experiences
WHERE id = $1 and candidate_id = $2
`

type DeletePastExperienceParams struct {
	ID          int64 `json:"id"`
	CandidateID int64 `json:"candidate_id"`
}

func (q *Queries) DeletePastExperience(ctx context.Context, arg DeletePastExperienceParams) error {
	_, err := q.db.Exec(ctx, deletePastExperience, arg.ID, arg.CandidateID)
	return err
}

const getPastExperience = `-- name: GetPastExperience :one
SELECT id, candidate_id, industry, employer, job_title, start_date, end_date, present, description, created_at FROM past_experiences
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPastExperience(ctx context.Context, id int64) (PastExperience, error) {
	row := q.db.QueryRow(ctx, getPastExperience, id)
	var i PastExperience
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.Industry,
		&i.Employer,
		&i.JobTitle,
		&i.StartDate,
		&i.EndDate,
		&i.Present,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listPastExperiences = `-- name: ListPastExperiences :many
SELECT id, candidate_id, industry, employer, job_title, start_date, end_date, present, description, created_at FROM past_experiences
WHERE candidate_id = $1
ORDER BY id
LIMIT $2
    OFFSET $3
`

type ListPastExperiencesParams struct {
	CandidateID int64 `json:"candidate_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListPastExperiences(ctx context.Context, arg ListPastExperiencesParams) ([]PastExperience, error) {
	rows, err := q.db.Query(ctx, listPastExperiences, arg.CandidateID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PastExperience{}
	for rows.Next() {
		var i PastExperience
		if err := rows.Scan(
			&i.ID,
			&i.CandidateID,
			&i.Industry,
			&i.Employer,
			&i.JobTitle,
			&i.StartDate,
			&i.EndDate,
			&i.Present,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePastExperience = `-- name: UpdatePastExperience :one
UPDATE past_experiences
SET industry = COALESCE($2, industry),
    employer = COALESCE($3, employer),
    job_title = COALESCE($4, job_title),
    start_date = COALESCE($5, start_date),
    end_date = COALESCE($6, end_date),
    present = COALESCE($7, present),
    description = COALESCE($8, description)
WHERE
    id = $1
RETURNING id, candidate_id, industry, employer, job_title, start_date, end_date, present, description, created_at
`

type UpdatePastExperienceParams struct {
	ID          int64       `json:"id"`
	Industry    pgtype.Text `json:"industry"`
	Employer    pgtype.Text `json:"employer"`
	JobTitle    pgtype.Text `json:"job_title"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Present     pgtype.Bool `json:"present"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdatePastExperience(ctx context.Context, arg UpdatePastExperienceParams) (PastExperience, error) {
	row := q.db.QueryRow(ctx, updatePastExperience,
		arg.ID,
		arg.Industry,
		arg.Employer,
		arg.JobTitle,
		arg.StartDate,
		arg.EndDate,
		arg.Present,
		arg.Description,
	)
	var i PastExperience
	err := row.Scan(
		&i.ID,
		&i.CandidateID,
		&i.Industry,
		&i.Employer,
		&i.JobTitle,
		&i.StartDate,
		&i.EndDate,
		&i.Present,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
