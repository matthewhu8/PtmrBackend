// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employer.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addJobListing = `-- name: AddJobListing :exec
UPDATE employers
SET job_listings = array_append(job_listings, $2)
WHERE id = $1
`

type AddJobListingParams struct {
	ID    int64       `json:"id"`
	JobID interface{} `json:"job_id"`
}

func (q *Queries) AddJobListing(ctx context.Context, arg AddJobListingParams) error {
	_, err := q.db.Exec(ctx, addJobListing, arg.ID, arg.JobID)
	return err
}

const createEmployer = `-- name: CreateEmployer :one
INSERT INTO employers (
    username,
    business_name,
    business_email,
    business_phone,
    location,
    industry,
    profile_photo,
    business_description
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         ) RETURNING id, username, business_name, business_email, business_phone, location, industry, profile_photo, business_description, job_listings, created_at
`

type CreateEmployerParams struct {
	Username            string `json:"username"`
	BusinessName        string `json:"business_name"`
	BusinessEmail       string `json:"business_email"`
	BusinessPhone       string `json:"business_phone"`
	Location            string `json:"location"`
	Industry            string `json:"industry"`
	ProfilePhoto        string `json:"profile_photo"`
	BusinessDescription string `json:"business_description"`
}

func (q *Queries) CreateEmployer(ctx context.Context, arg CreateEmployerParams) (Employer, error) {
	row := q.db.QueryRow(ctx, createEmployer,
		arg.Username,
		arg.BusinessName,
		arg.BusinessEmail,
		arg.BusinessPhone,
		arg.Location,
		arg.Industry,
		arg.ProfilePhoto,
		arg.BusinessDescription,
	)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BusinessName,
		&i.BusinessEmail,
		&i.BusinessPhone,
		&i.Location,
		&i.Industry,
		&i.ProfilePhoto,
		&i.BusinessDescription,
		&i.JobListings,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmployer = `-- name: DeleteEmployer :exec
DELETE FROM employers
WHERE id = $1
`

func (q *Queries) DeleteEmployer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmployer, id)
	return err
}

const getEmployer = `-- name: GetEmployer :one
SELECT id, username, business_name, business_email, business_phone, location, industry, profile_photo, business_description, job_listings, created_at FROM employers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployer(ctx context.Context, id int64) (Employer, error) {
	row := q.db.QueryRow(ctx, getEmployer, id)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BusinessName,
		&i.BusinessEmail,
		&i.BusinessPhone,
		&i.Location,
		&i.Industry,
		&i.ProfilePhoto,
		&i.BusinessDescription,
		&i.JobListings,
		&i.CreatedAt,
	)
	return i, err
}

const getEmployerIdByUsername = `-- name: GetEmployerIdByUsername :one
SELECT id FROM employers
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetEmployerIdByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, getEmployerIdByUsername, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listEmployers = `-- name: ListEmployers :many
SELECT id, username, business_name, business_email, business_phone, location, industry, profile_photo, business_description, job_listings, created_at FROM employers
WHERE username = $1
ORDER BY id
LIMIT $2
    OFFSET $3
`

type ListEmployersParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListEmployers(ctx context.Context, arg ListEmployersParams) ([]Employer, error) {
	rows, err := q.db.Query(ctx, listEmployers, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employer{}
	for rows.Next() {
		var i Employer
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.BusinessName,
			&i.BusinessEmail,
			&i.BusinessPhone,
			&i.Location,
			&i.Industry,
			&i.ProfilePhoto,
			&i.BusinessDescription,
			&i.JobListings,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployer = `-- name: UpdateEmployer :one
UPDATE employers
SET business_name =  COALESCE($2, business_name),
    business_email = COALESCE($3, business_email),
    business_phone = COALESCE($4, business_phone),
    location = COALESCE($5, location),
    industry = COALESCE($6, industry),
    profile_photo = COALESCE($7, profile_photo),
    business_description = COALESCE($8, business_description)
WHERE
    id = $1
RETURNING id, username, business_name, business_email, business_phone, location, industry, profile_photo, business_description, job_listings, created_at
`

type UpdateEmployerParams struct {
	ID                  int64       `json:"id"`
	BusinessName        pgtype.Text `json:"business_name"`
	BusinessEmail       pgtype.Text `json:"business_email"`
	BusinessPhone       pgtype.Text `json:"business_phone"`
	Location            pgtype.Text `json:"location"`
	Industry            pgtype.Text `json:"industry"`
	ProfilePhoto        pgtype.Text `json:"profile_photo"`
	BusinessDescription pgtype.Text `json:"business_description"`
}

func (q *Queries) UpdateEmployer(ctx context.Context, arg UpdateEmployerParams) (Employer, error) {
	row := q.db.QueryRow(ctx, updateEmployer,
		arg.ID,
		arg.BusinessName,
		arg.BusinessEmail,
		arg.BusinessPhone,
		arg.Location,
		arg.Industry,
		arg.ProfilePhoto,
		arg.BusinessDescription,
	)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BusinessName,
		&i.BusinessEmail,
		&i.BusinessPhone,
		&i.Location,
		&i.Industry,
		&i.ProfilePhoto,
		&i.BusinessDescription,
		&i.JobListings,
		&i.CreatedAt,
	)
	return i, err
}
