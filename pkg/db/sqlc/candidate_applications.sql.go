// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: candidate_applications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidateApplication = `-- name: CreateCandidateApplication :one
INSERT INTO candidate_applications (
    candidate_id,
    employer_id,
    elasticsearch_doc_id,
    job_doc_id,
    application_status
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at
`

type CreateCandidateApplicationParams struct {
	CandidateID        int64             `json:"candidate_id"`
	EmployerID         int64             `json:"employer_id"`
	ElasticsearchDocID string            `json:"elasticsearch_doc_id"`
	JobDocID           string            `json:"job_doc_id"`
	ApplicationStatus  ApplicationStatus `json:"application_status"`
}

func (q *Queries) CreateCandidateApplication(ctx context.Context, arg CreateCandidateApplicationParams) (CandidateApplication, error) {
	row := q.db.QueryRow(ctx, createCandidateApplication,
		arg.CandidateID,
		arg.EmployerID,
		arg.ElasticsearchDocID,
		arg.JobDocID,
		arg.ApplicationStatus,
	)
	var i CandidateApplication
	err := row.Scan(
		&i.CandidateID,
		&i.EmployerID,
		&i.ElasticsearchDocID,
		&i.JobDocID,
		&i.ApplicationStatus,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCandidateApplication = `-- name: DeleteCandidateApplication :exec
DELETE FROM candidate_applications
WHERE candidate_id = $1 AND employer_id = $2
`

type DeleteCandidateApplicationParams struct {
	CandidateID int64 `json:"candidate_id"`
	EmployerID  int64 `json:"employer_id"`
}

func (q *Queries) DeleteCandidateApplication(ctx context.Context, arg DeleteCandidateApplicationParams) error {
	_, err := q.db.Exec(ctx, deleteCandidateApplication, arg.CandidateID, arg.EmployerID)
	return err
}

const getCandidateApplicationsByEmployer = `-- name: GetCandidateApplicationsByEmployer :many
SELECT candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at FROM candidate_applications
WHERE employer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCandidateApplicationsByEmployer(ctx context.Context, employerID int64) ([]CandidateApplication, error) {
	rows, err := q.db.Query(ctx, getCandidateApplicationsByEmployer, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateApplication{}
	for rows.Next() {
		var i CandidateApplication
		if err := rows.Scan(
			&i.CandidateID,
			&i.EmployerID,
			&i.ElasticsearchDocID,
			&i.JobDocID,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateApplicationsByStatusAccepted = `-- name: GetCandidateApplicationsByStatusAccepted :many
SELECT candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at FROM candidate_applications
WHERE application_status = 'accepted' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCandidateApplicationsByStatusAccepted(ctx context.Context, candidateID int64) ([]CandidateApplication, error) {
	rows, err := q.db.Query(ctx, getCandidateApplicationsByStatusAccepted, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateApplication{}
	for rows.Next() {
		var i CandidateApplication
		if err := rows.Scan(
			&i.CandidateID,
			&i.EmployerID,
			&i.ElasticsearchDocID,
			&i.JobDocID,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateApplicationsByStatusPending = `-- name: GetCandidateApplicationsByStatusPending :many
SELECT candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at FROM candidate_applications
WHERE application_status = 'pending' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCandidateApplicationsByStatusPending(ctx context.Context, candidateID int64) ([]CandidateApplication, error) {
	rows, err := q.db.Query(ctx, getCandidateApplicationsByStatusPending, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateApplication{}
	for rows.Next() {
		var i CandidateApplication
		if err := rows.Scan(
			&i.CandidateID,
			&i.EmployerID,
			&i.ElasticsearchDocID,
			&i.JobDocID,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateApplicationsByStatusRejected = `-- name: GetCandidateApplicationsByStatusRejected :many
SELECT candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at FROM candidate_applications
WHERE application_status = 'rejected' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCandidateApplicationsByStatusRejected(ctx context.Context, candidateID int64) ([]CandidateApplication, error) {
	rows, err := q.db.Query(ctx, getCandidateApplicationsByStatusRejected, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateApplication{}
	for rows.Next() {
		var i CandidateApplication
		if err := rows.Scan(
			&i.CandidateID,
			&i.EmployerID,
			&i.ElasticsearchDocID,
			&i.JobDocID,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateApplicationsByStatusSubmitted = `-- name: GetCandidateApplicationsByStatusSubmitted :many
SELECT candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at FROM candidate_applications
WHERE application_status = 'submitted' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCandidateApplicationsByStatusSubmitted(ctx context.Context, candidateID int64) ([]CandidateApplication, error) {
	rows, err := q.db.Query(ctx, getCandidateApplicationsByStatusSubmitted, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateApplication{}
	for rows.Next() {
		var i CandidateApplication
		if err := rows.Scan(
			&i.CandidateID,
			&i.EmployerID,
			&i.ElasticsearchDocID,
			&i.JobDocID,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCandidateApplication = `-- name: UpdateCandidateApplication :one
UPDATE candidate_applications
SET application_status = COALESCE($3, application_status),
    elasticsearch_doc_id = COALESCE($4, elasticsearch_doc_id)
WHERE candidate_id = $1 AND employer_id = $2
RETURNING candidate_id, employer_id, elasticsearch_doc_id, job_doc_id, application_status, created_at
`

type UpdateCandidateApplicationParams struct {
	CandidateID        int64                 `json:"candidate_id"`
	EmployerID         int64                 `json:"employer_id"`
	ApplicationStatus  NullApplicationStatus `json:"application_status"`
	ElasticsearchDocID pgtype.Text           `json:"elasticsearch_doc_id"`
}

func (q *Queries) UpdateCandidateApplication(ctx context.Context, arg UpdateCandidateApplicationParams) (CandidateApplication, error) {
	row := q.db.QueryRow(ctx, updateCandidateApplication,
		arg.CandidateID,
		arg.EmployerID,
		arg.ApplicationStatus,
		arg.ElasticsearchDocID,
	)
	var i CandidateApplication
	err := row.Scan(
		&i.CandidateID,
		&i.EmployerID,
		&i.ElasticsearchDocID,
		&i.JobDocID,
		&i.ApplicationStatus,
		&i.CreatedAt,
	)
	return i, err
}

const updateCandidateApplicationStatus = `-- name: UpdateCandidateApplicationStatus :exec
UPDATE candidate_applications
SET application_status = $3
WHERE candidate_id = $1 AND employer_id = $2
`

type UpdateCandidateApplicationStatusParams struct {
	CandidateID       int64             `json:"candidate_id"`
	EmployerID        int64             `json:"employer_id"`
	ApplicationStatus ApplicationStatus `json:"application_status"`
}

func (q *Queries) UpdateCandidateApplicationStatus(ctx context.Context, arg UpdateCandidateApplicationStatusParams) error {
	_, err := q.db.Exec(ctx, updateCandidateApplicationStatus, arg.CandidateID, arg.EmployerID, arg.ApplicationStatus)
	return err
}
