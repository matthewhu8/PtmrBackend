// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: swipe.sql

package db

import (
	"context"
)

const createCandidateSwipe = `-- name: CreateCandidateSwipe :exec
INSERT INTO candidate_swipes (
    candidate_id,
    job_id,
    swipe
) VALUES (
             $1, $2, $3
         )
`

type CreateCandidateSwipeParams struct {
	CandidateID int64  `json:"candidate_id"`
	JobID       string `json:"job_id"`
	Swipe       Swipe  `json:"swipe"`
}

func (q *Queries) CreateCandidateSwipe(ctx context.Context, arg CreateCandidateSwipeParams) error {
	_, err := q.db.Exec(ctx, createCandidateSwipe, arg.CandidateID, arg.JobID, arg.Swipe)
	return err
}

const createEmployerSwipes = `-- name: CreateEmployerSwipes :exec
INSERT INTO employer_swipes (
    employer_id,
    candidate_id,
    swipe
) VALUES (
             $1, $2, $3
         )
`

type CreateEmployerSwipesParams struct {
	EmployerID  int64 `json:"employer_id"`
	CandidateID int64 `json:"candidate_id"`
	Swipe       Swipe `json:"swipe"`
}

func (q *Queries) CreateEmployerSwipes(ctx context.Context, arg CreateEmployerSwipesParams) error {
	_, err := q.db.Exec(ctx, createEmployerSwipes, arg.EmployerID, arg.CandidateID, arg.Swipe)
	return err
}

const deleteCandidateSwipe = `-- name: DeleteCandidateSwipe :exec
DELETE FROM candidate_swipes
WHERE candidate_id = $1 AND job_id = $2
`

type DeleteCandidateSwipeParams struct {
	CandidateID int64  `json:"candidate_id"`
	JobID       string `json:"job_id"`
}

func (q *Queries) DeleteCandidateSwipe(ctx context.Context, arg DeleteCandidateSwipeParams) error {
	_, err := q.db.Exec(ctx, deleteCandidateSwipe, arg.CandidateID, arg.JobID)
	return err
}

const deleteEmployerSwipe = `-- name: DeleteEmployerSwipe :exec
DELETE FROM employer_swipes
WHERE employer_id = $1 AND candidate_id = $2
`

type DeleteEmployerSwipeParams struct {
	EmployerID  int64 `json:"employer_id"`
	CandidateID int64 `json:"candidate_id"`
}

func (q *Queries) DeleteEmployerSwipe(ctx context.Context, arg DeleteEmployerSwipeParams) error {
	_, err := q.db.Exec(ctx, deleteEmployerSwipe, arg.EmployerID, arg.CandidateID)
	return err
}

const getCandidateIDsByEmployer = `-- name: GetCandidateIDsByEmployer :many
SELECT candidate_id
FROM employer_swipes
WHERE employer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetCandidateIDsByEmployer(ctx context.Context, employerID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getCandidateIDsByEmployer, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var candidate_id int64
		if err := rows.Scan(&candidate_id); err != nil {
			return nil, err
		}
		items = append(items, candidate_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateSwipe = `-- name: GetCandidateSwipe :many
SELECT candidate_id, job_id, swipe, created_at FROM candidate_swipes
WHERE job_id = $1 and candidate_id = $2
ORDER BY created_at DESC
`

type GetCandidateSwipeParams struct {
	JobID       string `json:"job_id"`
	CandidateID int64  `json:"candidate_id"`
}

func (q *Queries) GetCandidateSwipe(ctx context.Context, arg GetCandidateSwipeParams) ([]CandidateSwipe, error) {
	rows, err := q.db.Query(ctx, getCandidateSwipe, arg.JobID, arg.CandidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CandidateSwipe{}
	for rows.Next() {
		var i CandidateSwipe
		if err := rows.Scan(
			&i.CandidateID,
			&i.JobID,
			&i.Swipe,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployerSwipe = `-- name: GetEmployerSwipe :one
SELECT employer_id, candidate_id, swipe, created_at FROM employer_swipes
WHERE candidate_id = $1 and employer_id = $2
ORDER BY created_at DESC
`

type GetEmployerSwipeParams struct {
	CandidateID int64 `json:"candidate_id"`
	EmployerID  int64 `json:"employer_id"`
}

func (q *Queries) GetEmployerSwipe(ctx context.Context, arg GetEmployerSwipeParams) (EmployerSwipe, error) {
	row := q.db.QueryRow(ctx, getEmployerSwipe, arg.CandidateID, arg.EmployerID)
	var i EmployerSwipe
	err := row.Scan(
		&i.EmployerID,
		&i.CandidateID,
		&i.Swipe,
		&i.CreatedAt,
	)
	return i, err
}

const getJobIDsByCandidate = `-- name: GetJobIDsByCandidate :many
SELECT job_id
FROM candidate_swipes
WHERE candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetJobIDsByCandidate(ctx context.Context, candidateID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getJobIDsByCandidate, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var job_id string
		if err := rows.Scan(&job_id); err != nil {
			return nil, err
		}
		items = append(items, job_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRejectedCandidateIdsByEmployer = `-- name: GetRejectedCandidateIdsByEmployer :many
SELECT candidate_id
FROM employer_swipes
WHERE employer_id = $1 AND swipe = 'reject'
`

func (q *Queries) GetRejectedCandidateIdsByEmployer(ctx context.Context, employerID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getRejectedCandidateIdsByEmployer, employerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var candidate_id int64
		if err := rows.Scan(&candidate_id); err != nil {
			return nil, err
		}
		items = append(items, candidate_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRejectedJobIdsByCandidate = `-- name: GetRejectedJobIdsByCandidate :many
SELECT job_id
FROM candidate_swipes
WHERE candidate_id = $1 AND swipe = 'reject'
`

func (q *Queries) GetRejectedJobIdsByCandidate(ctx context.Context, candidateID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getRejectedJobIdsByCandidate, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var job_id string
		if err := rows.Scan(&job_id); err != nil {
			return nil, err
		}
		items = append(items, job_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
