// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApplicationStatus string

const (
	ApplicationStatusPending   ApplicationStatus = "pending"
	ApplicationStatusSubmitted ApplicationStatus = "submitted"
	ApplicationStatusAccepted  ApplicationStatus = "accepted"
	ApplicationStatusRejected  ApplicationStatus = "rejected"
)

func (e *ApplicationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationStatus(s)
	case string:
		*e = ApplicationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationStatus: %T", src)
	}
	return nil
}

type NullApplicationStatus struct {
	ApplicationStatus ApplicationStatus `json:"application_status"`
	Valid             bool              `json:"valid"` // Valid is true if ApplicationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationStatus), nil
}

type Education string

const (
	EducationHighschooldiploma Education = "high school diploma"
	EducationAssociate         Education = "associate"
	EducationBachelor          Education = "bachelor"
	EducationMaster            Education = "master"
	EducationDoctoral          Education = "doctoral"
)

func (e *Education) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Education(s)
	case string:
		*e = Education(s)
	default:
		return fmt.Errorf("unsupported scan type for Education: %T", src)
	}
	return nil
}

type NullEducation struct {
	Education Education `json:"education"`
	Valid     bool      `json:"valid"` // Valid is true if Education is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEducation) Scan(value interface{}) error {
	if value == nil {
		ns.Education, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Education.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEducation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Education), nil
}

type JobPreference string

const (
	JobPreferenceInperson JobPreference = "in person"
	JobPreferenceRemote   JobPreference = "remote"
	JobPreferenceOpen     JobPreference = "open"
	JobPreferenceHybrid   JobPreference = "hybrid"
)

func (e *JobPreference) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobPreference(s)
	case string:
		*e = JobPreference(s)
	default:
		return fmt.Errorf("unsupported scan type for JobPreference: %T", src)
	}
	return nil
}

type NullJobPreference struct {
	JobPreference JobPreference `json:"job_preference"`
	Valid         bool          `json:"valid"` // Valid is true if JobPreference is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobPreference) Scan(value interface{}) error {
	if value == nil {
		ns.JobPreference, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JobPreference.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobPreference) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JobPreference), nil
}

type Role string

const (
	RoleEmployer  Role = "employer"
	RoleCandidate Role = "candidate"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Swipe string

const (
	SwipeAccept Swipe = "accept"
	SwipeReject Swipe = "reject"
)

func (e *Swipe) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Swipe(s)
	case string:
		*e = Swipe(s)
	default:
		return fmt.Errorf("unsupported scan type for Swipe: %T", src)
	}
	return nil
}

type NullSwipe struct {
	Swipe Swipe `json:"swipe"`
	Valid bool  `json:"valid"` // Valid is true if Swipe is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSwipe) Scan(value interface{}) error {
	if value == nil {
		ns.Swipe, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Swipe.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSwipe) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Swipe), nil
}

type Candidate struct {
	ID                 int64         `json:"id"`
	Username           string        `json:"username"`
	FullName           string        `json:"full_name"`
	PhoneNumber        string        `json:"phone_number"`
	Education          Education     `json:"education"`
	Location           string        `json:"location"`
	SkillSet           []string      `json:"skill_set"`
	Certificates       []string      `json:"certificates"`
	IndustryOfInterest string        `json:"industry_of_interest"`
	JobPreference      JobPreference `json:"job_preference"`
	TimeAvailability   []byte        `json:"time_availability"`
	AccountVerified    bool          `json:"account_verified"`
	ResumeFile         string        `json:"resume_file"`
	ProfilePhoto       string        `json:"profile_photo"`
	Description        string        `json:"description"`
	CreatedAt          time.Time     `json:"created_at"`
}

type CandidateApplication struct {
	CandidateID        int64             `json:"candidate_id"`
	EmployerID         int64             `json:"employer_id"`
	ElasticsearchDocID string            `json:"elasticsearch_doc_id"`
	JobDocID           string            `json:"job_doc_id"`
	ApplicationStatus  ApplicationStatus `json:"application_status"`
	CreatedAt          time.Time         `json:"created_at"`
}

type CandidateSwipe struct {
	CandidateID int64     `json:"candidate_id"`
	JobID       string    `json:"job_id"`
	Swipe       Swipe     `json:"swipe"`
	CreatedAt   time.Time `json:"created_at"`
}

type Employer struct {
	ID                  int64     `json:"id"`
	Username            string    `json:"username"`
	BusinessName        string    `json:"business_name"`
	BusinessEmail       string    `json:"business_email"`
	BusinessPhone       string    `json:"business_phone"`
	Location            string    `json:"location"`
	Industry            string    `json:"industry"`
	ProfilePhoto        string    `json:"profile_photo"`
	BusinessDescription string    `json:"business_description"`
	JobListings         []string  `json:"job_listings"`
	CreatedAt           time.Time `json:"created_at"`
}

type EmployerApplication struct {
	EmployerID        int64             `json:"employer_id"`
	CandidateID       int64             `json:"candidate_id"`
	Message           string            `json:"message"`
	ApplicationStatus ApplicationStatus `json:"application_status"`
	CreatedAt         time.Time         `json:"created_at"`
}

type EmployerSwipe struct {
	EmployerID  int64     `json:"employer_id"`
	CandidateID int64     `json:"candidate_id"`
	Swipe       Swipe     `json:"swipe"`
	CreatedAt   time.Time `json:"created_at"`
}

type PastExperience struct {
	ID          int64       `json:"id"`
	CandidateID int64       `json:"candidate_id"`
	Industry    string      `json:"industry"`
	Employer    string      `json:"employer"`
	JobTitle    string      `json:"job_title"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Present     bool        `json:"present"`
	Description string      `json:"description"`
	CreatedAt   time.Time   `json:"created_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	Username        string    `json:"username"`
	Email           string    `json:"email"`
	HashedPassword  string    `json:"hashed_password"`
	Role            Role      `json:"role"`
	CreatedAt       time.Time `json:"created_at"`
	IsEmailVerified bool      `json:"is_email_verified"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}
