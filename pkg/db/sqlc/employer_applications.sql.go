// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employer_applications.sql

package db

import (
	"context"
	"time"
)

const createEmployerApplication = `-- name: CreateEmployerApplication :one
INSERT INTO employer_applications (
    employer_id,
    candidate_id,
    message,
    application_status,
    created_at
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING employer_id, candidate_id, message, application_status, created_at
`

type CreateEmployerApplicationParams struct {
	EmployerID        int64             `json:"employer_id"`
	CandidateID       int64             `json:"candidate_id"`
	Message           string            `json:"message"`
	ApplicationStatus ApplicationStatus `json:"application_status"`
	CreatedAt         time.Time         `json:"created_at"`
}

func (q *Queries) CreateEmployerApplication(ctx context.Context, arg CreateEmployerApplicationParams) (EmployerApplication, error) {
	row := q.db.QueryRow(ctx, createEmployerApplication,
		arg.EmployerID,
		arg.CandidateID,
		arg.Message,
		arg.ApplicationStatus,
		arg.CreatedAt,
	)
	var i EmployerApplication
	err := row.Scan(
		&i.EmployerID,
		&i.CandidateID,
		&i.Message,
		&i.ApplicationStatus,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmployerApplication = `-- name: DeleteEmployerApplication :exec
DELETE FROM employer_applications
WHERE employer_id = $1 AND candidate_id = $2
`

type DeleteEmployerApplicationParams struct {
	EmployerID  int64 `json:"employer_id"`
	CandidateID int64 `json:"candidate_id"`
}

func (q *Queries) DeleteEmployerApplication(ctx context.Context, arg DeleteEmployerApplicationParams) error {
	_, err := q.db.Exec(ctx, deleteEmployerApplication, arg.EmployerID, arg.CandidateID)
	return err
}

const getEmployerApplicationsByCandidate = `-- name: GetEmployerApplicationsByCandidate :many
SELECT employer_id, candidate_id, message, application_status, created_at FROM employer_applications
WHERE candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmployerApplicationsByCandidate(ctx context.Context, candidateID int64) ([]EmployerApplication, error) {
	rows, err := q.db.Query(ctx, getEmployerApplicationsByCandidate, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerApplication{}
	for rows.Next() {
		var i EmployerApplication
		if err := rows.Scan(
			&i.EmployerID,
			&i.CandidateID,
			&i.Message,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployerApplicationsByStatusAccepted = `-- name: GetEmployerApplicationsByStatusAccepted :many
SELECT employer_id, candidate_id, message, application_status, created_at FROM employer_applications
WHERE application_status = 'accepted' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmployerApplicationsByStatusAccepted(ctx context.Context, candidateID int64) ([]EmployerApplication, error) {
	rows, err := q.db.Query(ctx, getEmployerApplicationsByStatusAccepted, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerApplication{}
	for rows.Next() {
		var i EmployerApplication
		if err := rows.Scan(
			&i.EmployerID,
			&i.CandidateID,
			&i.Message,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployerApplicationsByStatusPending = `-- name: GetEmployerApplicationsByStatusPending :many
SELECT employer_id, candidate_id, message, application_status, created_at FROM employer_applications
WHERE application_status = 'pending' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmployerApplicationsByStatusPending(ctx context.Context, candidateID int64) ([]EmployerApplication, error) {
	rows, err := q.db.Query(ctx, getEmployerApplicationsByStatusPending, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerApplication{}
	for rows.Next() {
		var i EmployerApplication
		if err := rows.Scan(
			&i.EmployerID,
			&i.CandidateID,
			&i.Message,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployerApplicationsByStatusRejected = `-- name: GetEmployerApplicationsByStatusRejected :many
SELECT employer_id, candidate_id, message, application_status, created_at FROM employer_applications
WHERE application_status = 'rejected' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmployerApplicationsByStatusRejected(ctx context.Context, candidateID int64) ([]EmployerApplication, error) {
	rows, err := q.db.Query(ctx, getEmployerApplicationsByStatusRejected, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerApplication{}
	for rows.Next() {
		var i EmployerApplication
		if err := rows.Scan(
			&i.EmployerID,
			&i.CandidateID,
			&i.Message,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployerApplicationsByStatusSubmitted = `-- name: GetEmployerApplicationsByStatusSubmitted :many
SELECT employer_id, candidate_id, message, application_status, created_at FROM employer_applications
WHERE application_status = 'submitted' AND candidate_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEmployerApplicationsByStatusSubmitted(ctx context.Context, candidateID int64) ([]EmployerApplication, error) {
	rows, err := q.db.Query(ctx, getEmployerApplicationsByStatusSubmitted, candidateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployerApplication{}
	for rows.Next() {
		var i EmployerApplication
		if err := rows.Scan(
			&i.EmployerID,
			&i.CandidateID,
			&i.Message,
			&i.ApplicationStatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployerApplication = `-- name: UpdateEmployerApplication :one
UPDATE employer_applications
SET application_status = COALESCE($3, application_status)
WHERE employer_id = $1 AND candidate_id = $2
RETURNING employer_id, candidate_id, message, application_status, created_at
`

type UpdateEmployerApplicationParams struct {
	EmployerID        int64                 `json:"employer_id"`
	CandidateID       int64                 `json:"candidate_id"`
	ApplicationStatus NullApplicationStatus `json:"application_status"`
}

func (q *Queries) UpdateEmployerApplication(ctx context.Context, arg UpdateEmployerApplicationParams) (EmployerApplication, error) {
	row := q.db.QueryRow(ctx, updateEmployerApplication, arg.EmployerID, arg.CandidateID, arg.ApplicationStatus)
	var i EmployerApplication
	err := row.Scan(
		&i.EmployerID,
		&i.CandidateID,
		&i.Message,
		&i.ApplicationStatus,
		&i.CreatedAt,
	)
	return i, err
}

const updateEmployerApplicationStatus = `-- name: UpdateEmployerApplicationStatus :exec
UPDATE employer_applications
SET application_status = $3
WHERE candidate_id = $1 AND employer_id = $2
`

type UpdateEmployerApplicationStatusParams struct {
	CandidateID       int64             `json:"candidate_id"`
	EmployerID        int64             `json:"employer_id"`
	ApplicationStatus ApplicationStatus `json:"application_status"`
}

func (q *Queries) UpdateEmployerApplicationStatus(ctx context.Context, arg UpdateEmployerApplicationStatusParams) error {
	_, err := q.db.Exec(ctx, updateEmployerApplicationStatus, arg.CandidateID, arg.EmployerID, arg.ApplicationStatus)
	return err
}
