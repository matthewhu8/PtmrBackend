// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hankimmy/PtmrBackend/pkg/elasticsearch (interfaces: ESClient)

// Package mockes is a generated GoMock package.
package mockes

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/hankimmy/PtmrBackend/pkg/db/sqlc"
	elasticsearch "github.com/hankimmy/PtmrBackend/pkg/elasticsearch"
)

// MockESClient is a mock of ESClient interface.
type MockESClient struct {
	ctrl     *gomock.Controller
	recorder *MockESClientMockRecorder
}

// MockESClientMockRecorder is the mock recorder for MockESClient.
type MockESClientMockRecorder struct {
	mock *MockESClient
}

// NewMockESClient creates a new mock instance.
func NewMockESClient(ctrl *gomock.Controller) *MockESClient {
	mock := &MockESClient{ctrl: ctrl}
	mock.recorder = &MockESClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockESClient) EXPECT() *MockESClientMockRecorder {
	return m.recorder
}

// AddPastExperienceToCandidate mocks base method.
func (m *MockESClient) AddPastExperienceToCandidate(arg0 context.Context, arg1 string, arg2 elasticsearch.PastExperience) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPastExperienceToCandidate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPastExperienceToCandidate indicates an expected call of AddPastExperienceToCandidate.
func (mr *MockESClientMockRecorder) AddPastExperienceToCandidate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPastExperienceToCandidate", reflect.TypeOf((*MockESClient)(nil).AddPastExperienceToCandidate), arg0, arg1, arg2)
}

// DeleteCandidate mocks base method.
func (m *MockESClient) DeleteCandidate(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandidate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCandidate indicates an expected call of DeleteCandidate.
func (mr *MockESClientMockRecorder) DeleteCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandidate", reflect.TypeOf((*MockESClient)(nil).DeleteCandidate), arg0, arg1)
}

// DeleteCandidateApplication mocks base method.
func (m *MockESClient) DeleteCandidateApplication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandidateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCandidateApplication indicates an expected call of DeleteCandidateApplication.
func (mr *MockESClientMockRecorder) DeleteCandidateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandidateApplication", reflect.TypeOf((*MockESClient)(nil).DeleteCandidateApplication), arg0, arg1)
}

// DeleteEmployerApplication mocks base method.
func (m *MockESClient) DeleteEmployerApplication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployerApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployerApplication indicates an expected call of DeleteEmployerApplication.
func (mr *MockESClientMockRecorder) DeleteEmployerApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployerApplication", reflect.TypeOf((*MockESClient)(nil).DeleteEmployerApplication), arg0, arg1)
}

// DeleteJob mocks base method.
func (m *MockESClient) DeleteJob(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockESClientMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockESClient)(nil).DeleteJob), arg0)
}

// DeletePastExperienceFromCandidate mocks base method.
func (m *MockESClient) DeletePastExperienceFromCandidate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePastExperienceFromCandidate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePastExperienceFromCandidate indicates an expected call of DeletePastExperienceFromCandidate.
func (mr *MockESClientMockRecorder) DeletePastExperienceFromCandidate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePastExperienceFromCandidate", reflect.TypeOf((*MockESClient)(nil).DeletePastExperienceFromCandidate), arg0, arg1, arg2)
}

// GetCandidate mocks base method.
func (m *MockESClient) GetCandidate(arg0 context.Context, arg1 string) (*elasticsearch.Candidate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidate", arg0, arg1)
	ret0, _ := ret[0].(*elasticsearch.Candidate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidate indicates an expected call of GetCandidate.
func (mr *MockESClientMockRecorder) GetCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidate", reflect.TypeOf((*MockESClient)(nil).GetCandidate), arg0, arg1)
}

// GetCandidateApplication mocks base method.
func (m *MockESClient) GetCandidateApplication(arg0 context.Context, arg1 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateApplication", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateApplication indicates an expected call of GetCandidateApplication.
func (mr *MockESClientMockRecorder) GetCandidateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateApplication", reflect.TypeOf((*MockESClient)(nil).GetCandidateApplication), arg0, arg1)
}

// GetEmployerApplication mocks base method.
func (m *MockESClient) GetEmployerApplication(arg0 context.Context, arg1 string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerApplication", arg0, arg1)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerApplication indicates an expected call of GetEmployerApplication.
func (mr *MockESClientMockRecorder) GetEmployerApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerApplication", reflect.TypeOf((*MockESClient)(nil).GetEmployerApplication), arg0, arg1)
}

// GetJob mocks base method.
func (m *MockESClient) GetJob(arg0 string) (*elasticsearch.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*elasticsearch.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockESClientMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockESClient)(nil).GetJob), arg0)
}

// GetPastExperience mocks base method.
func (m *MockESClient) GetPastExperience(arg0 context.Context, arg1, arg2 string) (*elasticsearch.PastExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastExperience", arg0, arg1, arg2)
	ret0, _ := ret[0].(*elasticsearch.PastExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastExperience indicates an expected call of GetPastExperience.
func (mr *MockESClientMockRecorder) GetPastExperience(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastExperience", reflect.TypeOf((*MockESClient)(nil).GetPastExperience), arg0, arg1, arg2)
}

// IndexCandidate mocks base method.
func (m *MockESClient) IndexCandidate(arg0 context.Context, arg1 db.Candidate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexCandidate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexCandidate indicates an expected call of IndexCandidate.
func (mr *MockESClientMockRecorder) IndexCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexCandidate", reflect.TypeOf((*MockESClient)(nil).IndexCandidate), arg0, arg1)
}

// IndexCandidateApplication mocks base method.
func (m *MockESClient) IndexCandidateApplication(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexCandidateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexCandidateApplication indicates an expected call of IndexCandidateApplication.
func (mr *MockESClientMockRecorder) IndexCandidateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexCandidateApplication", reflect.TypeOf((*MockESClient)(nil).IndexCandidateApplication), arg0, arg1, arg2)
}

// IndexCandidateV2 mocks base method.
func (m *MockESClient) IndexCandidateV2(arg0 context.Context, arg1 elasticsearch.Candidate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexCandidateV2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexCandidateV2 indicates an expected call of IndexCandidateV2.
func (mr *MockESClientMockRecorder) IndexCandidateV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexCandidateV2", reflect.TypeOf((*MockESClient)(nil).IndexCandidateV2), arg0, arg1)
}

// IndexEmployerApplication mocks base method.
func (m *MockESClient) IndexEmployerApplication(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexEmployerApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexEmployerApplication indicates an expected call of IndexEmployerApplication.
func (mr *MockESClientMockRecorder) IndexEmployerApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexEmployerApplication", reflect.TypeOf((*MockESClient)(nil).IndexEmployerApplication), arg0, arg1, arg2)
}

// IndexJob mocks base method.
func (m *MockESClient) IndexJob(arg0 *elasticsearch.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexJob indicates an expected call of IndexJob.
func (mr *MockESClientMockRecorder) IndexJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexJob", reflect.TypeOf((*MockESClient)(nil).IndexJob), arg0)
}

// ListPastExperiences mocks base method.
func (m *MockESClient) ListPastExperiences(arg0 context.Context, arg1 string) ([]elasticsearch.PastExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPastExperiences", arg0, arg1)
	ret0, _ := ret[0].([]elasticsearch.PastExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPastExperiences indicates an expected call of ListPastExperiences.
func (mr *MockESClientMockRecorder) ListPastExperiences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPastExperiences", reflect.TypeOf((*MockESClient)(nil).ListPastExperiences), arg0, arg1)
}

// SearchJobs mocks base method.
func (m *MockESClient) SearchJobs(arg0, arg1, arg2, arg3 string, arg4 elasticsearch.GeoPoint) ([]elasticsearch.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchJobs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]elasticsearch.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchJobs indicates an expected call of SearchJobs.
func (mr *MockESClientMockRecorder) SearchJobs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchJobs", reflect.TypeOf((*MockESClient)(nil).SearchJobs), arg0, arg1, arg2, arg3, arg4)
}

// UpdateCandidate mocks base method.
func (m *MockESClient) UpdateCandidate(arg0 context.Context, arg1 db.Candidate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCandidate indicates an expected call of UpdateCandidate.
func (mr *MockESClientMockRecorder) UpdateCandidate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidate", reflect.TypeOf((*MockESClient)(nil).UpdateCandidate), arg0, arg1)
}

// UpdateCandidateApplication mocks base method.
func (m *MockESClient) UpdateCandidateApplication(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCandidateApplication indicates an expected call of UpdateCandidateApplication.
func (mr *MockESClientMockRecorder) UpdateCandidateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidateApplication", reflect.TypeOf((*MockESClient)(nil).UpdateCandidateApplication), arg0, arg1, arg2)
}

// UpdateCandidateV2 mocks base method.
func (m *MockESClient) UpdateCandidateV2(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandidateV2", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCandidateV2 indicates an expected call of UpdateCandidateV2.
func (mr *MockESClientMockRecorder) UpdateCandidateV2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandidateV2", reflect.TypeOf((*MockESClient)(nil).UpdateCandidateV2), arg0, arg1, arg2)
}

// UpdateEmployerApplication mocks base method.
func (m *MockESClient) UpdateEmployerApplication(arg0 context.Context, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployerApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployerApplication indicates an expected call of UpdateEmployerApplication.
func (mr *MockESClientMockRecorder) UpdateEmployerApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployerApplication", reflect.TypeOf((*MockESClient)(nil).UpdateEmployerApplication), arg0, arg1, arg2)
}

// UpdateJob mocks base method.
func (m *MockESClient) UpdateJob(arg0 string, arg1 *elasticsearch.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockESClientMockRecorder) UpdateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockESClient)(nil).UpdateJob), arg0, arg1)
}

// UpdatePastExperienceInCandidate mocks base method.
func (m *MockESClient) UpdatePastExperienceInCandidate(arg0 context.Context, arg1 string, arg2 elasticsearch.PastExperience) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePastExperienceInCandidate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePastExperienceInCandidate indicates an expected call of UpdatePastExperienceInCandidate.
func (mr *MockESClientMockRecorder) UpdatePastExperienceInCandidate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePastExperienceInCandidate", reflect.TypeOf((*MockESClient)(nil).UpdatePastExperienceInCandidate), arg0, arg1, arg2)
}
