// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hankimmy/PtmrBackend/pkg/google (interfaces: GAPI)

// Package mockgapi is a generated GoMock package.
package mockgapi

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	google "github.com/hankimmy/PtmrBackend/pkg/google"
)

// MockGAPI is a mock of GAPI interface.
type MockGAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGAPIMockRecorder
}

// MockGAPIMockRecorder is the mock recorder for MockGAPI.
type MockGAPIMockRecorder struct {
	mock *MockGAPI
}

// NewMockGAPI creates a new mock instance.
func NewMockGAPI(ctrl *gomock.Controller) *MockGAPI {
	mock := &MockGAPI{ctrl: ctrl}
	mock.recorder = &MockGAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGAPI) EXPECT() *MockGAPIMockRecorder {
	return m.recorder
}

// GetLatLon mocks base method.
func (m *MockGAPI) GetLatLon(arg0 string) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatLon", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatLon indicates an expected call of GetLatLon.
func (mr *MockGAPIMockRecorder) GetLatLon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatLon", reflect.TypeOf((*MockGAPI)(nil).GetLatLon), arg0)
}

// GetPlaceDetails mocks base method.
func (m *MockGAPI) GetPlaceDetails(arg0 string) (*google.PlaceDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceDetails", arg0)
	ret0, _ := ret[0].(*google.PlaceDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceDetails indicates an expected call of GetPlaceDetails.
func (mr *MockGAPIMockRecorder) GetPlaceDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceDetails", reflect.TypeOf((*MockGAPI)(nil).GetPlaceDetails), arg0)
}

// GetPlaceID mocks base method.
func (m *MockGAPI) GetPlaceID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceID indicates an expected call of GetPlaceID.
func (mr *MockGAPIMockRecorder) GetPlaceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceID", reflect.TypeOf((*MockGAPI)(nil).GetPlaceID), arg0)
}

// GetPlaceIDOfAddress mocks base method.
func (m *MockGAPI) GetPlaceIDOfAddress(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaceIDOfAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaceIDOfAddress indicates an expected call of GetPlaceIDOfAddress.
func (mr *MockGAPIMockRecorder) GetPlaceIDOfAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaceIDOfAddress", reflect.TypeOf((*MockGAPI)(nil).GetPlaceIDOfAddress), arg0)
}
