// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hankimmy/PtmrBackend/pkg/worker (interfaces: TaskDistributor)

// Package mockwk is a generated GoMock package.
package mockwk

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	worker "github.com/hankimmy/PtmrBackend/pkg/worker"
	asynq "github.com/hibiken/asynq"
)

// MockTaskDistributor is a mock of TaskDistributor interface.
type MockTaskDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDistributorMockRecorder
}

// MockTaskDistributorMockRecorder is the mock recorder for MockTaskDistributor.
type MockTaskDistributorMockRecorder struct {
	mock *MockTaskDistributor
}

// NewMockTaskDistributor creates a new mock instance.
func NewMockTaskDistributor(ctrl *gomock.Controller) *MockTaskDistributor {
	mock := &MockTaskDistributor{ctrl: ctrl}
	mock.recorder = &MockTaskDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDistributor) EXPECT() *MockTaskDistributorMockRecorder {
	return m.recorder
}

// DistributeTaskAddPastExperience mocks base method.
func (m *MockTaskDistributor) DistributeTaskAddPastExperience(arg0 context.Context, arg1 *worker.PayloadPastExperience, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskAddPastExperience", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskAddPastExperience indicates an expected call of DistributeTaskAddPastExperience.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskAddPastExperience(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskAddPastExperience", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskAddPastExperience), varargs...)
}

// DistributeTaskCreateCandidate mocks base method.
func (m *MockTaskDistributor) DistributeTaskCreateCandidate(arg0 context.Context, arg1 *worker.PayloadCandidate, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskCreateCandidate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskCreateCandidate indicates an expected call of DistributeTaskCreateCandidate.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskCreateCandidate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskCreateCandidate", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskCreateCandidate), varargs...)
}

// DistributeTaskCreateCandidateApplication mocks base method.
func (m *MockTaskDistributor) DistributeTaskCreateCandidateApplication(arg0 context.Context, arg1 *worker.PayloadCreateApplication, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskCreateCandidateApplication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskCreateCandidateApplication indicates an expected call of DistributeTaskCreateCandidateApplication.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskCreateCandidateApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskCreateCandidateApplication", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskCreateCandidateApplication), varargs...)
}

// DistributeTaskCreateEmployerApplication mocks base method.
func (m *MockTaskDistributor) DistributeTaskCreateEmployerApplication(arg0 context.Context, arg1 *worker.PayloadCreateApplication, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskCreateEmployerApplication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskCreateEmployerApplication indicates an expected call of DistributeTaskCreateEmployerApplication.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskCreateEmployerApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskCreateEmployerApplication", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskCreateEmployerApplication), varargs...)
}

// DistributeTaskDeleteCandidateApplication mocks base method.
func (m *MockTaskDistributor) DistributeTaskDeleteCandidateApplication(arg0 context.Context, arg1 *worker.PayloadDeleteApplication, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskDeleteCandidateApplication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskDeleteCandidateApplication indicates an expected call of DistributeTaskDeleteCandidateApplication.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskDeleteCandidateApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskDeleteCandidateApplication", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskDeleteCandidateApplication), varargs...)
}

// DistributeTaskDeleteEmployerApplication mocks base method.
func (m *MockTaskDistributor) DistributeTaskDeleteEmployerApplication(arg0 context.Context, arg1 *worker.PayloadDeleteApplication, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskDeleteEmployerApplication", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskDeleteEmployerApplication indicates an expected call of DistributeTaskDeleteEmployerApplication.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskDeleteEmployerApplication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskDeleteEmployerApplication", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskDeleteEmployerApplication), varargs...)
}

// DistributeTaskDeletePastExperience mocks base method.
func (m *MockTaskDistributor) DistributeTaskDeletePastExperience(arg0 context.Context, arg1 *worker.PayloadDeletePastExperience, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskDeletePastExperience", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskDeletePastExperience indicates an expected call of DistributeTaskDeletePastExperience.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskDeletePastExperience(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskDeletePastExperience", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskDeletePastExperience), varargs...)
}

// DistributeTaskSendVerifyEmail mocks base method.
func (m *MockTaskDistributor) DistributeTaskSendVerifyEmail(arg0 context.Context, arg1 *worker.PayloadSendVerifyEmail, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskSendVerifyEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskSendVerifyEmail indicates an expected call of DistributeTaskSendVerifyEmail.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskSendVerifyEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskSendVerifyEmail", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskSendVerifyEmail), varargs...)
}

// DistributeTaskUpdateCandidate mocks base method.
func (m *MockTaskDistributor) DistributeTaskUpdateCandidate(arg0 context.Context, arg1 *worker.PayloadCandidate, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskUpdateCandidate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskUpdateCandidate indicates an expected call of DistributeTaskUpdateCandidate.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskUpdateCandidate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskUpdateCandidate", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskUpdateCandidate), varargs...)
}

// DistributeTaskUpdatePastExperience mocks base method.
func (m *MockTaskDistributor) DistributeTaskUpdatePastExperience(arg0 context.Context, arg1 *worker.PayloadPastExperience, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskUpdatePastExperience", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskUpdatePastExperience indicates an expected call of DistributeTaskUpdatePastExperience.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskUpdatePastExperience(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskUpdatePastExperience", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskUpdatePastExperience), varargs...)
}
